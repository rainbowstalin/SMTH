#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMTH.Data.Users
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="smth")]
	public partial class UsersViewDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportPrint(ReportPrint instance);
    partial void UpdateReportPrint(ReportPrint instance);
    partial void DeleteReportPrint(ReportPrint instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolePermission(RolePermission instance);
    partial void UpdateRolePermission(RolePermission instance);
    partial void DeleteRolePermission(RolePermission instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public UsersViewDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["smthConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UsersViewDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UsersViewDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UsersViewDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UsersViewDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportPrint> ReportPrints
		{
			get
			{
				return this.GetTable<ReportPrint>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolePermission> RolePermissions
		{
			get
			{
				return this.GetTable<RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LoginUuid;
		
		private System.Nullable<System.DateTime> _LoginTime;
		
		private System.Nullable<System.DateTime> _LogoffTime;
		
		private System.Guid _UserUuid;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginUuidChanging(System.Guid value);
    partial void OnLoginUuidChanged();
    partial void OnLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginTimeChanged();
    partial void OnLogoffTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogoffTimeChanged();
    partial void OnUserUuidChanging(System.Guid value);
    partial void OnUserUuidChanged();
    #endregion
		
		public Login()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LoginUuid
		{
			get
			{
				return this._LoginUuid;
			}
			set
			{
				if ((this._LoginUuid != value))
				{
					this.OnLoginUuidChanging(value);
					this.SendPropertyChanging();
					this._LoginUuid = value;
					this.SendPropertyChanged("LoginUuid");
					this.OnLoginUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoffTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogoffTime
		{
			get
			{
				return this._LogoffTime;
			}
			set
			{
				if ((this._LogoffTime != value))
				{
					this.OnLogoffTimeChanging(value);
					this.SendPropertyChanging();
					this._LogoffTime = value;
					this.SendPropertyChanged("LogoffTime");
					this.OnLogoffTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserUuid
		{
			get
			{
				return this._UserUuid;
			}
			set
			{
				if ((this._UserUuid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserUuidChanging(value);
					this.SendPropertyChanging();
					this._UserUuid = value;
					this.SendPropertyChanged("UserUuid");
					this.OnUserUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Login", Storage="_User", ThisKey="UserUuid", OtherKey="UserUuid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._UserUuid = value.UserUuid;
					}
					else
					{
						this._UserUuid = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersimissionUuid;
		
		private string _PersimissionName;
		
		private string _PersimissionDescription;
		
		private EntitySet<RolePermission> _RolePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersimissionUuidChanging(System.Guid value);
    partial void OnPersimissionUuidChanged();
    partial void OnPersimissionNameChanging(string value);
    partial void OnPersimissionNameChanged();
    partial void OnPersimissionDescriptionChanging(string value);
    partial void OnPersimissionDescriptionChanged();
    #endregion
		
		public Permission()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersimissionUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersimissionUuid
		{
			get
			{
				return this._PersimissionUuid;
			}
			set
			{
				if ((this._PersimissionUuid != value))
				{
					this.OnPersimissionUuidChanging(value);
					this.SendPropertyChanging();
					this._PersimissionUuid = value;
					this.SendPropertyChanged("PersimissionUuid");
					this.OnPersimissionUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersimissionName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string PersimissionName
		{
			get
			{
				return this._PersimissionName;
			}
			set
			{
				if ((this._PersimissionName != value))
				{
					this.OnPersimissionNameChanging(value);
					this.SendPropertyChanging();
					this._PersimissionName = value;
					this.SendPropertyChanged("PersimissionName");
					this.OnPersimissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersimissionDescription", DbType="NChar(1000)")]
		public string PersimissionDescription
		{
			get
			{
				return this._PersimissionDescription;
			}
			set
			{
				if ((this._PersimissionDescription != value))
				{
					this.OnPersimissionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PersimissionDescription = value;
					this.SendPropertyChanged("PersimissionDescription");
					this.OnPersimissionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_RolePermissions", ThisKey="PersimissionUuid", OtherKey="PermissionUuid")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReportUuid;
		
		private string _ReportName;
		
		private EntitySet<ReportPrint> _ReportPrints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportUuidChanging(System.Guid value);
    partial void OnReportUuidChanged();
    partial void OnReportNameChanging(string value);
    partial void OnReportNameChanged();
    #endregion
		
		public Report()
		{
			this._ReportPrints = new EntitySet<ReportPrint>(new Action<ReportPrint>(this.attach_ReportPrints), new Action<ReportPrint>(this.detach_ReportPrints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReportUuid
		{
			get
			{
				return this._ReportUuid;
			}
			set
			{
				if ((this._ReportUuid != value))
				{
					this.OnReportUuidChanging(value);
					this.SendPropertyChanging();
					this._ReportUuid = value;
					this.SendPropertyChanged("ReportUuid");
					this.OnReportUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportName", DbType="NChar(30)")]
		public string ReportName
		{
			get
			{
				return this._ReportName;
			}
			set
			{
				if ((this._ReportName != value))
				{
					this.OnReportNameChanging(value);
					this.SendPropertyChanging();
					this._ReportName = value;
					this.SendPropertyChanged("ReportName");
					this.OnReportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportPrint", Storage="_ReportPrints", ThisKey="ReportUuid", OtherKey="ReportUuid")]
		public EntitySet<ReportPrint> ReportPrints
		{
			get
			{
				return this._ReportPrints;
			}
			set
			{
				this._ReportPrints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportPrints(ReportPrint entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportPrints(ReportPrint entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportPrint")]
	public partial class ReportPrint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReportPrintUuid;
		
		private System.Guid _ReportUuid;
		
		private System.DateTime _PrintTime;
		
		private System.Guid _UserUuid;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportPrintUuidChanging(System.Guid value);
    partial void OnReportPrintUuidChanged();
    partial void OnReportUuidChanging(System.Guid value);
    partial void OnReportUuidChanged();
    partial void OnPrintTimeChanging(System.DateTime value);
    partial void OnPrintTimeChanged();
    partial void OnUserUuidChanging(System.Guid value);
    partial void OnUserUuidChanged();
    #endregion
		
		public ReportPrint()
		{
			this._Report = default(EntityRef<Report>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportPrintUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReportPrintUuid
		{
			get
			{
				return this._ReportPrintUuid;
			}
			set
			{
				if ((this._ReportPrintUuid != value))
				{
					this.OnReportPrintUuidChanging(value);
					this.SendPropertyChanging();
					this._ReportPrintUuid = value;
					this.SendPropertyChanged("ReportPrintUuid");
					this.OnReportPrintUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ReportUuid
		{
			get
			{
				return this._ReportUuid;
			}
			set
			{
				if ((this._ReportUuid != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportUuidChanging(value);
					this.SendPropertyChanging();
					this._ReportUuid = value;
					this.SendPropertyChanged("ReportUuid");
					this.OnReportUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrintTime", DbType="DateTime NOT NULL")]
		public System.DateTime PrintTime
		{
			get
			{
				return this._PrintTime;
			}
			set
			{
				if ((this._PrintTime != value))
				{
					this.OnPrintTimeChanging(value);
					this.SendPropertyChanging();
					this._PrintTime = value;
					this.SendPropertyChanged("PrintTime");
					this.OnPrintTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserUuid
		{
			get
			{
				return this._UserUuid;
			}
			set
			{
				if ((this._UserUuid != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserUuidChanging(value);
					this.SendPropertyChanging();
					this._UserUuid = value;
					this.SendPropertyChanged("UserUuid");
					this.OnUserUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportPrint", Storage="_Report", ThisKey="ReportUuid", OtherKey="ReportUuid", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportPrints.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportPrints.Add(this);
						this._ReportUuid = value.ReportUuid;
					}
					else
					{
						this._ReportUuid = default(System.Guid);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportPrint", Storage="_User", ThisKey="UserUuid", OtherKey="UserUuid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ReportPrints.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ReportPrints.Add(this);
						this._UserUuid = value.UserUuid;
					}
					else
					{
						this._UserUuid = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleUuid;
		
		private string _Rolename;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleUuidChanging(System.Guid value);
    partial void OnRoleUuidChanged();
    partial void OnRolenameChanging(string value);
    partial void OnRolenameChanged();
    #endregion
		
		public Role()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleUuid
		{
			get
			{
				return this._RoleUuid;
			}
			set
			{
				if ((this._RoleUuid != value))
				{
					this.OnRoleUuidChanging(value);
					this.SendPropertyChanging();
					this._RoleUuid = value;
					this.SendPropertyChanged("RoleUuid");
					this.OnRoleUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rolename", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Rolename
		{
			get
			{
				return this._Rolename;
			}
			set
			{
				if ((this._Rolename != value))
				{
					this.OnRolenameChanging(value);
					this.SendPropertyChanging();
					this._Rolename = value;
					this.SendPropertyChanged("Rolename");
					this.OnRolenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermissions", ThisKey="RoleUuid", OtherKey="RoleUuid")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleUuid", OtherKey="UserRoleUuid")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermission")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RolePermissionUuid;
		
		private System.Guid _RoleUuid;
		
		private System.Nullable<System.Guid> _PermissionUuid;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolePermissionUuidChanging(System.Guid value);
    partial void OnRolePermissionUuidChanged();
    partial void OnRoleUuidChanging(System.Guid value);
    partial void OnRoleUuidChanged();
    partial void OnPermissionUuidChanging(System.Nullable<System.Guid> value);
    partial void OnPermissionUuidChanged();
    #endregion
		
		public RolePermission()
		{
			this._Role = default(EntityRef<Role>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolePermissionUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RolePermissionUuid
		{
			get
			{
				return this._RolePermissionUuid;
			}
			set
			{
				if ((this._RolePermissionUuid != value))
				{
					this.OnRolePermissionUuidChanging(value);
					this.SendPropertyChanging();
					this._RolePermissionUuid = value;
					this.SendPropertyChanged("RolePermissionUuid");
					this.OnRolePermissionUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleUuid
		{
			get
			{
				return this._RoleUuid;
			}
			set
			{
				if ((this._RoleUuid != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleUuidChanging(value);
					this.SendPropertyChanging();
					this._RoleUuid = value;
					this.SendPropertyChanged("RoleUuid");
					this.OnRoleUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionUuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PermissionUuid
		{
			get
			{
				return this._PermissionUuid;
			}
			set
			{
				if ((this._PermissionUuid != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionUuidChanging(value);
					this.SendPropertyChanging();
					this._PermissionUuid = value;
					this.SendPropertyChanged("PermissionUuid");
					this.OnPermissionUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="RoleUuid", OtherKey="RoleUuid", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._RoleUuid = value.RoleUuid;
					}
					else
					{
						this._RoleUuid = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_Permission", ThisKey="PermissionUuid", OtherKey="PersimissionUuid", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._PermissionUuid = value.PersimissionUuid;
					}
					else
					{
						this._PermissionUuid = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserUuid;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Guid _UserRoleUuid;
		
		private EntitySet<Login> _Logins;
		
		private EntitySet<ReportPrint> _ReportPrints;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserUuidChanging(System.Guid value);
    partial void OnUserUuidChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserRoleUuidChanging(System.Guid value);
    partial void OnUserRoleUuidChanged();
    #endregion
		
		public User()
		{
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			this._ReportPrints = new EntitySet<ReportPrint>(new Action<ReportPrint>(this.attach_ReportPrints), new Action<ReportPrint>(this.detach_ReportPrints));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserUuid
		{
			get
			{
				return this._UserUuid;
			}
			set
			{
				if ((this._UserUuid != value))
				{
					this.OnUserUuidChanging(value);
					this.SendPropertyChanging();
					this._UserUuid = value;
					this.SendPropertyChanged("UserUuid");
					this.OnUserUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserRoleUuid
		{
			get
			{
				return this._UserRoleUuid;
			}
			set
			{
				if ((this._UserRoleUuid != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleUuidChanging(value);
					this.SendPropertyChanging();
					this._UserRoleUuid = value;
					this.SendPropertyChanged("UserRoleUuid");
					this.OnUserRoleUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Login", Storage="_Logins", ThisKey="UserUuid", OtherKey="UserUuid")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportPrint", Storage="_ReportPrints", ThisKey="UserUuid", OtherKey="UserUuid")]
		public EntitySet<ReportPrint> ReportPrints
		{
			get
			{
				return this._ReportPrints;
			}
			set
			{
				this._ReportPrints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="UserRoleUuid", OtherKey="RoleUuid", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserRoleUuid = value.RoleUuid;
					}
					else
					{
						this._UserRoleUuid = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ReportPrints(ReportPrint entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ReportPrints(ReportPrint entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
